#include <bits/stdc++.h>
using namespace std;

const int MAXN = 110;
vector<pair<int, int>> adj[MAXN];
int dist[MAXN];

int networkDelayTime(vector<vector<int>>& times, int n, int k) {
    // initialize adjacency list
    for (int i = 1; i <= n; i++) {
        adj[i].clear();
        dist[i] = INT_MAX;
    }
    for (auto& t : times) {
        adj[t[0]].push_back({t[1], t[2]});
    }

    // Dijkstra's shortest path algorithm
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, k});
    dist[k] = 0;
    while (!pq.empty()) {
        int u = pq.top().second, d = pq.top().first;
        pq.pop();
        if (d > dist[u]) continue;
        for (auto& p : adj[u]) {
            int v = p.first, w = p.second;
            if (dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
                pq.push({dist[v], v});
            }
        }
    }

    // check if all nodes are reachable and return max distance
    int ans = 0;
    for (int i = 1; i <= n; i++) {
        if (dist[i] == INT_MAX) return -1;
        ans = max(ans, dist[i]);
    }
    return ans;
}

int main() {
    vector<vector<int>> times = {{2,1,1}, {2,3,1}, {3,4,1}};
    int n = 4, k = 2;
    int res = networkDelayTime(times, n, k);
    cout << res << endl;
    return 0;
}
